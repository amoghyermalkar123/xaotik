[*] write a basic implementation of concurrent request model.

[IMP] learn about lifetimes, ive used because i am spoiled by the compiler
[IMP] learn more about iterators, mapping, collect, etc


[first-do-this] create a pipeline between request handler tower and the tui backend 

[] write a statistics module
    [] metrics:
        [] response time distribution (histogram)
        [] latency distribution (histogram)
        [*] req/sec, total, success, fail
[] file of urls to test from
[] wrap around a CLI

[] finally a(some) reporting mechanism(s)
        * while testing have a tui
        * after test generate a report
                * bugs
                        [] fix : exit draw loop

[last] r/w throughput

bugs :
[] transaction rate should always be floating point 
[] request details widget does not render on updates 

inspirations : * https://github.com/hatoo/oha
                 (main program flow)
                 main.rs -> client.rs -> monitor.rs -> printer.rs
                 (files other than this are small and only util) 
               * github -> gobench
               * loadtestninja - one which i wrote in go 
